// <auto-generated />
using System;
using GameServer.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameServer.DB.AccountGameDb", b =>
                {
                    b.Property<int>("AccountGameDbId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountGameDbId");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    b.ToTable("AccountGame");
                });

            modelBuilder.Entity("GameServer.DB.ItemDataDb", b =>
                {
                    b.Property<int>("ItemDataDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemDataDbId"));

                    b.Property<int>("ItemTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("maxCount")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("ItemDataDbId");

                    b.HasIndex("ItemDataDbId")
                        .IsUnique();

                    b.ToTable("ItemData");
                });

            modelBuilder.Entity("GameServer.DB.ItemDb", b =>
                {
                    b.Property<int>("ItemDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemDbId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("Equipped")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerDbId")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("ItemDbId");

                    b.HasIndex("OwnerDbId");

                    b.HasIndex("ItemDbId", "OwnerDbId")
                        .IsUnique()
                        .HasFilter("[OwnerDbId] IS NOT NULL");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("GameServer.DB.MapDb", b =>
                {
                    b.Property<int>("MapDbId")
                        .HasColumnType("int");

                    b.Property<int>("MaxX")
                        .HasColumnType("int");

                    b.Property<int>("MaxY")
                        .HasColumnType("int");

                    b.Property<int>("MinX")
                        .HasColumnType("int");

                    b.Property<int>("MinY")
                        .HasColumnType("int");

                    b.Property<string>("TileInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MapDbId");

                    b.HasIndex("MapDbId")
                        .IsUnique();

                    b.ToTable("MapInfo");
                });

            modelBuilder.Entity("GameServer.DB.MonsterDb", b =>
                {
                    b.Property<int>("MonsterDbId")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.Property<int>("TotalExp")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonsterDbId");

                    b.HasIndex("MonsterDbId")
                        .IsUnique();

                    b.ToTable("Monster");
                });

            modelBuilder.Entity("GameServer.DB.MonsterRewardDb", b =>
                {
                    b.Property<int>("MonsterRewardDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonsterRewardDbId"));

                    b.Property<int?>("MonsterDbId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("probability")
                        .HasColumnType("int");

                    b.HasKey("MonsterRewardDbId");

                    b.HasIndex("MonsterDbId");

                    b.HasIndex("MonsterRewardDbId")
                        .IsUnique();

                    b.ToTable("MonsterReward");
                });

            modelBuilder.Entity("GameServer.DB.PlayerDb", b =>
                {
                    b.Property<int>("PlayerDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerDbId"));

                    b.Property<int>("AccountGameDbId")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("CurMap")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("PosX")
                        .HasColumnType("real");

                    b.Property<float>("PosY")
                        .HasColumnType("real");

                    b.Property<float>("PosZ")
                        .HasColumnType("real");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.Property<int>("TotalExp")
                        .HasColumnType("int");

                    b.HasKey("PlayerDbId");

                    b.HasIndex("AccountGameDbId");

                    b.HasIndex("PlayerName")
                        .IsUnique();

                    b.ToTable("Player");
                });

            modelBuilder.Entity("GameServer.DB.ServerDb", b =>
                {
                    b.Property<int>("ServerDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServerDbId"));

                    b.Property<int>("BusyScore")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.HasKey("ServerDbId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServerInfo");
                });

            modelBuilder.Entity("GameServer.DB.ShopDb", b =>
                {
                    b.Property<int>("ShopDbId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopDbId");

                    b.HasIndex("ShopDbId")
                        .IsUnique();

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("GameServer.DB.ShopProductDb", b =>
                {
                    b.Property<int>("ShopProductDbId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopDbId")
                        .HasColumnType("int");

                    b.Property<int>("CAmount")
                        .HasColumnType("int");

                    b.Property<int>("CType")
                        .HasColumnType("int");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ShopProductDbId", "ShopDbId");

                    b.HasIndex("ShopDbId");

                    b.HasIndex("ShopProductDbId", "ShopDbId")
                        .IsUnique();

                    b.ToTable("ShopProduct");
                });

            modelBuilder.Entity("GameServer.DB.ItemDb", b =>
                {
                    b.HasOne("GameServer.DB.PlayerDb", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerDbId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("GameServer.DB.MonsterRewardDb", b =>
                {
                    b.HasOne("GameServer.DB.MonsterDb", "Monster")
                        .WithMany("rewards")
                        .HasForeignKey("MonsterDbId");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("GameServer.DB.PlayerDb", b =>
                {
                    b.HasOne("GameServer.DB.AccountGameDb", "AccountGame")
                        .WithMany("Players")
                        .HasForeignKey("AccountGameDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountGame");
                });

            modelBuilder.Entity("GameServer.DB.ShopProductDb", b =>
                {
                    b.HasOne("GameServer.DB.ShopDb", "Shop")
                        .WithMany("ShopProducts")
                        .HasForeignKey("ShopDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("GameServer.DB.AccountGameDb", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("GameServer.DB.MonsterDb", b =>
                {
                    b.Navigation("rewards");
                });

            modelBuilder.Entity("GameServer.DB.PlayerDb", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameServer.DB.ShopDb", b =>
                {
                    b.Navigation("ShopProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
